{"version":3,"sources":["components/Logo/Logo.js","components/ImageInputForm/ImageInputForm.js","components/FaceRecognition/FaceRecognition.js","App.js","serviceWorker.js","index.js"],"names":["logoStyle","color","height","width","background","Logo","react_default","a","createElement","className","style","inputStyle","maxWidth","margin","ImageInputForm","_ref","inputChange","displayImage","onSubmit","onChange","id","type","aria-describedby","href","imageStyle","FaceRecognition","loadedImage","box","length","src","alt","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","app","Clarifai","App","apiKey","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","onInputChange","event","setState","imageUrlInput","target","value","preventDefault","state","models","predict","FACE_DETECT_MODEL","then","response","showBoundingBox","catch","error","console","log","boxData","particles_default","params","particleStyle","components_Logo_Logo","components_ImageInputForm_ImageInputForm","components_FaceRecognition_FaceRecognition","Component","particles","number","density","enable","value_area","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wRAYMA,EAAY,CAChBC,MAAO,QACPC,OAAQ,OACRC,MAAO,OACPC,WAAY,gDAGCC,EAjBF,WACX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,MAAOV,GACnCM,EAAAC,EAAAC,cAAA,KAAGC,UAAU,OAAb,uBC4BFE,EAAa,CACjBC,SAAU,OACVC,OAAQ,QAGKC,EArCQ,SAAAC,GAAmC,IAAhCC,EAAgCD,EAAhCC,YAAaC,EAAmBF,EAAnBE,aACrC,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,MAAb,iEAKAH,EAAAC,EAAAC,cAAA,QAAMU,SAAUD,EAAcP,MAAOC,EAAYF,UAAU,gBACzDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,SACEW,SAAUH,EACVI,GAAG,OACHX,UAAU,8CACVY,KAAK,OACLC,mBAAiB,cAEnBhB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,8BAA8Bc,KAAK,MAArD,WAIFjB,EAAAC,EAAAC,cAAA,SAAOY,GAAG,YAAYX,UAAU,4BAAhC,gECWJe,SAAa,CACjBrB,MAAO,QACPD,OAAQ,SAGKuB,EArCS,SAAAV,GAA0B,IAAvBW,EAAuBX,EAAvBW,YAAaC,EAAUZ,EAAVY,IACtC,OAAID,EAAYE,OAAS,EAErBtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OACEY,GAAG,aACHV,MAAOc,EACPK,IAAKH,EACLI,IAAI,WAENxB,EAAAC,EAAAC,cAAA,OACEC,UAAU,eACVC,MAAO,CACLqB,IAAKJ,EAAIK,OACTC,MAAON,EAAIO,SACXC,OAAQR,EAAIS,UACZC,KAAMV,EAAIW,aAQlBhC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,6ECjBF8B,EAAM,IAAIC,IAASC,IAAI,CAC3BC,OAAQ,qCAGJD,cACJ,SAAAA,IAAc,IAAAE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACZE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QAQFI,sBAAwB,SAAAC,GACtB,IAAMC,EACJD,EAAKE,QAAQ,GAAGF,KAAKG,QAAQ,GAAGC,YAAYC,aACxCC,EAAQC,SAASC,eAAe,cAChCxD,EAAQyD,OAAOH,EAAMtD,OACrBD,EAAS0D,OAAOH,EAAMvD,QAE5B,MAAO,CACLoC,QAASc,EAAaS,SAAW1D,EACjC6B,OAAQoB,EAAaU,QAAU5D,EAC/BgC,SAAU/B,EAAQiD,EAAaW,UAAY5D,EAC3CiC,UAAWlC,EAASkD,EAAaY,WAAa9D,IApBpCyC,EAwBdsB,cAAgB,SAAAC,GACdvB,EAAKwB,SAAS,CAAEC,cAAeF,EAAMG,OAAOC,SAzBhC3B,EA4BdzB,SAAW,SAAAgD,GACTA,EAAMK,iBACN5B,EAAKwB,SAAS,CAAEzC,YAAaiB,EAAK6B,MAAMJ,gBAExC7B,EAAIkC,OACDC,QAAQlC,IAASmC,kBAAmBhC,EAAK6B,MAAMJ,eAC/CQ,KAAK,SAAAC,GAAQ,OACZlC,EAAKmC,gBAAgBnC,EAAKO,sBAAsB2B,MAEjDE,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,mBAAoBF,MArCtCrC,EAwCdmC,gBAAkB,SAAAK,GAChBxC,EAAKwB,SAAS,CAAExC,IAAKwD,KAvCrBxC,EAAK6B,MAAQ,CACXJ,cAAe,GACf1C,YAAa,GACbC,IAAK,IALKgB,wEA6CZ,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4E,EAAA7E,EAAD,CAAWE,UAAU,YAAY4E,OAAQC,IAEzChF,EAAAC,EAAAC,cAAC+E,EAAD,MAEAjF,EAAAC,EAAAC,cAACgF,EAAD,CACEvE,aAAc6B,KAAK5B,SACnBF,YAAa8B,KAAKmB,gBAEpB3D,EAAAC,EAAAC,cAACiF,EAAD,CACE9D,IAAKmB,KAAK0B,MAAM7C,IAChBD,YAAaoB,KAAK0B,MAAM9C,sBA1DhBgE,aAiEZJ,EAAgB,CACpBK,UAAW,CACTC,OAAQ,CACNtB,MAAO,GACPuB,QAAS,CACPC,QAAQ,EACRC,WAAY,QAMLtD,ICjFKuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhG,EAAAC,EAAAC,cAAC+F,EAAD,MAAS7C,SAASC,eAAe,SD2H3C,kBAAmB6C,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.3ec41544.chunk.js","sourcesContent":["import React from 'react';\n\nconst Logo = () => {\n  return (\n    <div className=\"ma4 mt0\">\n      <div className=\"shadow-2 br2\" style={logoStyle}>\n        <p className=\"pa3\">Logo Placeholder</p>\n      </div>\n    </div>\n  );\n};\n\nconst logoStyle = {\n  color: 'white',\n  height: '7rem',\n  width: '7rem',\n  background: 'linear-gradient(to bottom, #4286f4, #373b44)'\n};\n\nexport default Logo;\n","import React from 'react';\n\nconst ImageInputForm = ({ inputChange, displayImage }) => {\n  return (\n    <div>\n      <p className=\"f4\">\n        Input a url linking to a photo and the face will be detected.\n      </p>\n\n      {/* Tachyons form */}\n      <form onSubmit={displayImage} style={inputStyle} className=\"pa4 black-80\">\n        <div className=\"pa4 shadow-5 br2\">\n          <div className=\"center\">\n            <input\n              onChange={inputChange}\n              id=\"name\"\n              className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"\n              type=\"text\"\n              aria-describedby=\"name-desc\"\n            />\n            <button className=\"grow f6 link ba ph3 pv2 mb2\" href=\"#0\">\n              Detect\n            </button>\n          </div>\n          <small id=\"name-desc\" className=\"white f6 black-60 db mb2\">\n            Make sure the url points directly to the image's source.\n          </small>\n        </div>\n      </form>\n      {/* Tachyons form end */}\n    </div>\n  );\n};\n\nconst inputStyle = {\n  maxWidth: '80vw',\n  margin: 'auto'\n};\n\nexport default ImageInputForm;\n","import React from 'react';\nimport './FaceRecognition.css';\n\nconst FaceRecognition = ({ loadedImage, box }) => {\n  if (loadedImage.length > 0) {\n    return (\n      <div className=\"center\">\n        <div className=\"absolute mt2\">\n          <img\n            id=\"inputImage\"\n            style={imageStyle}\n            src={loadedImage}\n            alt=\"loaded\"\n          />\n          <div\n            className=\"bounding-box\"\n            style={{\n              top: box.topRow,\n              right: box.rightCol,\n              bottom: box.bottomRow,\n              left: box.leftCol\n            }}\n          />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <p className=\"white f3\">Image Will Display Here</p>\n      </div>\n    );\n  }\n};\n\nconst imageStyle = {\n  width: '500px',\n  height: 'auto'\n};\n\nexport default FaceRecognition;\n","import React, { Component } from 'react';\n// import Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageInputForm from './components/ImageInputForm/ImageInputForm';\n// import Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport './App.css';\n// Imported dependencies\nimport 'tachyons';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\n\nconst app = new Clarifai.App({\n  apiKey: '767ef821cf0a4a4783f1c39e1248cae0'\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      imageUrlInput: '',\n      loadedImage: '',\n      box: {}\n    };\n  }\n\n  calculateFaceLocation = data => {\n    const clarifaiFace =\n      data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputImage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - clarifaiFace.right_col * width,\n      bottomRow: height - clarifaiFace.bottom_row * height\n    };\n  };\n\n  onInputChange = event => {\n    this.setState({ imageUrlInput: event.target.value });\n  };\n\n  onSubmit = event => {\n    event.preventDefault();\n    this.setState({ loadedImage: this.state.imageUrlInput });\n\n    app.models\n      .predict(Clarifai.FACE_DETECT_MODEL, this.state.imageUrlInput)\n      .then(response =>\n        this.showBoundingBox(this.calculateFaceLocation(response))\n      )\n      .catch(error => console.log('what happened???', error));\n  };\n\n  showBoundingBox = boxData => {\n    this.setState({ box: boxData });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className=\"particles\" params={particleStyle} />\n        {/* <Navigation /> */}\n        <Logo />\n        {/* <Rank /> */}\n        <ImageInputForm\n          displayImage={this.onSubmit}\n          inputChange={this.onInputChange}\n        />\n        <FaceRecognition\n          box={this.state.box}\n          loadedImage={this.state.loadedImage}\n        />\n      </div>\n    );\n  }\n}\n\nconst particleStyle = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}